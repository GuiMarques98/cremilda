
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'moduleCOMMA_ ELSE_ EQUAL_ FALSE IF_ LPAREN_ NAME NUMBER OP RPAREN_ SEMICOLON_ STRING THEN_ TRUE TYPENAMEatom : NUMBERatom : STRINGatom : TRUEatom : FALSEatom : TYPENAMEatom : NAMEdefargs : NAMEdefargs : NAME COMMA_ defargselem : valueelem : value OP valueelem : ifexprexpr : elemfargs : elemfargs : elem COMMA_ fargsfcall : value LPAREN_ RPAREN_fcall : value LPAREN_ fargs RPAREN_fundef : NAME LPAREN_ defargs RPAREN_ EQUAL_ exprifexpr : IF_ value THEN_ elem ELSE_ elemmodule : statement SEMICOLON_module : statement SEMICOLON_ modulestatement : vardefstatement : fundefvalue : atomvalue : fcallvalue : LPAREN_ expr RPAREN_vardef : NAME EQUAL_ expr'
    
_lr_action_items = {'NAME':([0,6,7,8,17,18,26,27,30,37,39,41,45,],[5,5,10,24,10,10,10,10,24,10,10,10,10,]),'$end':([1,6,9,],[0,-19,-20,]),'SEMICOLON_':([2,3,4,10,11,12,13,14,15,16,19,20,21,22,23,32,33,36,40,43,46,],[6,-21,-22,-6,-26,-12,-9,-11,-23,-24,-1,-2,-3,-4,-5,-10,-15,-25,-16,-17,-18,]),'EQUAL_':([5,31,],[7,39,]),'LPAREN_':([5,7,10,13,15,16,17,18,19,20,21,22,23,26,27,29,32,33,36,37,39,40,41,45,],[8,17,-6,27,-23,-24,17,17,-1,-2,-3,-4,-5,17,17,27,27,-15,-25,17,17,-16,17,17,]),'IF_':([7,17,27,37,39,41,45,],[18,18,18,18,18,18,18,]),'NUMBER':([7,17,18,26,27,37,39,41,45,],[19,19,19,19,19,19,19,19,19,]),'STRING':([7,17,18,26,27,37,39,41,45,],[20,20,20,20,20,20,20,20,20,]),'TRUE':([7,17,18,26,27,37,39,41,45,],[21,21,21,21,21,21,21,21,21,]),'FALSE':([7,17,18,26,27,37,39,41,45,],[22,22,22,22,22,22,22,22,22,]),'TYPENAME':([7,17,18,26,27,37,39,41,45,],[23,23,23,23,23,23,23,23,23,]),'OP':([10,13,15,16,19,20,21,22,23,33,36,40,],[-6,26,-23,-24,-1,-2,-3,-4,-5,-15,-25,-16,]),'RPAREN_':([10,12,13,14,15,16,19,20,21,22,23,24,25,27,28,32,33,34,35,36,38,40,44,46,],[-6,-12,-9,-11,-23,-24,-1,-2,-3,-4,-5,-7,31,33,36,-10,-15,40,-13,-25,-8,-16,-14,-18,]),'THEN_':([10,15,16,19,20,21,22,23,29,33,36,40,],[-6,-23,-24,-1,-2,-3,-4,-5,37,-15,-25,-16,]),'COMMA_':([10,13,14,15,16,19,20,21,22,23,24,32,33,35,36,40,46,],[-6,-9,-11,-23,-24,-1,-2,-3,-4,-5,30,-10,-15,41,-25,-16,-18,]),'ELSE_':([10,13,14,15,16,19,20,21,22,23,32,33,36,40,42,46,],[-6,-9,-11,-23,-24,-1,-2,-3,-4,-5,-10,-15,-25,-16,45,-18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'module':([0,6,],[1,9,]),'statement':([0,6,],[2,2,]),'vardef':([0,6,],[3,3,]),'fundef':([0,6,],[4,4,]),'expr':([7,17,39,],[11,28,43,]),'elem':([7,17,27,37,39,41,45,],[12,12,35,42,12,35,46,]),'value':([7,17,18,26,27,37,39,41,45,],[13,13,29,32,13,13,13,13,13,]),'ifexpr':([7,17,27,37,39,41,45,],[14,14,14,14,14,14,14,]),'atom':([7,17,18,26,27,37,39,41,45,],[15,15,15,15,15,15,15,15,15,]),'fcall':([7,17,18,26,27,37,39,41,45,],[16,16,16,16,16,16,16,16,16,]),'defargs':([8,30,],[25,38,]),'fargs':([27,41,],[34,44,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('atom -> NUMBER','atom',1,'p_atom_1','ply.py',126),
  ('atom -> STRING','atom',1,'p_atom_2','ply.py',126),
  ('atom -> TRUE','atom',1,'p_atom_3','ply.py',126),
  ('atom -> FALSE','atom',1,'p_atom_4','ply.py',126),
  ('atom -> TYPENAME','atom',1,'p_atom_5','ply.py',126),
  ('atom -> NAME','atom',1,'p_atom_6','ply.py',126),
  ('defargs -> NAME','defargs',1,'p_defargs_1','ply.py',126),
  ('defargs -> NAME COMMA_ defargs','defargs',3,'p_defargs_2','ply.py',126),
  ('elem -> value','elem',1,'p_elem_1','ply.py',126),
  ('elem -> value OP value','elem',3,'p_elem_2','ply.py',126),
  ('elem -> ifexpr','elem',1,'p_elem_3','ply.py',126),
  ('expr -> elem','expr',1,'p_expr_1','ply.py',126),
  ('fargs -> elem','fargs',1,'p_fargs_1','ply.py',126),
  ('fargs -> elem COMMA_ fargs','fargs',3,'p_fargs_2','ply.py',126),
  ('fcall -> value LPAREN_ RPAREN_','fcall',3,'p_fcall_1','ply.py',126),
  ('fcall -> value LPAREN_ fargs RPAREN_','fcall',4,'p_fcall_2','ply.py',126),
  ('fundef -> NAME LPAREN_ defargs RPAREN_ EQUAL_ expr','fundef',6,'p_fundef_1','ply.py',126),
  ('ifexpr -> IF_ value THEN_ elem ELSE_ elem','ifexpr',6,'p_ifexpr_1','ply.py',126),
  ('module -> statement SEMICOLON_','module',2,'p_module_1','ply.py',126),
  ('module -> statement SEMICOLON_ module','module',3,'p_module_2','ply.py',126),
  ('statement -> vardef','statement',1,'p_statement_1','ply.py',126),
  ('statement -> fundef','statement',1,'p_statement_2','ply.py',126),
  ('value -> atom','value',1,'p_value_1','ply.py',126),
  ('value -> fcall','value',1,'p_value_2','ply.py',126),
  ('value -> LPAREN_ expr RPAREN_','value',3,'p_value_3','ply.py',126),
  ('vardef -> NAME EQUAL_ expr','vardef',3,'p_vardef_1','ply.py',126),
]
